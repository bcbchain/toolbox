package parsecode

// GoLang can't declare const array, so ... var

// WhiteListPKG - these packages can be imported
var WhiteListPKG = map[string]struct{}{
	// SYS packages
	"\"archive/tar\"":               {},
	"\"archive/zip\"":               {},
	"\"bufio\"":                     {},
	"\"builtin\"":                   {},
	"\"bytes\"":                     {},
	"\"compress/bzip2\"":            {},
	"\"compress/flate\"":            {},
	"\"compress/gzip\"":             {},
	"\"compress/lzw\"":              {},
	"\"compress/zlib\"":             {},
	"\"container/heap\"":            {},
	"\"container/list\"":            {},
	"\"container/ring\"":            {},
	"\"context\"":                   {},
	"\"crypto\"":                    {},
	"\"crypto/aes\"":                {},
	"\"crypto/cipher\"":             {},
	"\"crypto/des\"":                {},
	"\"crypto/dsa\"":                {},
	"\"crypto/ecdsa\"":              {},
	"\"crypto/elliptic\"":           {},
	"\"crypto/hmac\"":               {},
	"\"crypto/md5\"":                {},
	"\"crypto/rc4\"":                {},
	"\"crypto/rsa\"":                {},
	"\"crypto/sha1\"":               {},
	"\"crypto/sha256\"":             {},
	"\"crypto/sha512\"":             {},
	"\"crypto/subtle\"":             {},
	"\"crypto/tls\"":                {},
	"\"crypto/x509\"":               {},
	"\"crypto/x509/pkix\"":          {},
	"\"database/sql\"":              {},
	"\"database/sql/driver\"":       {},
	"\"debug/dwarf\"":               {},
	"\"debug/elf\"":                 {},
	"\"debug/gosym\"":               {},
	"\"debug/macho\"":               {},
	"\"debug/pe\"":                  {},
	"\"debug/plan9obj\"":            {},
	"\"encoding\"":                  {},
	"\"encoding/ascii85\"":          {},
	"\"encoding/asn1\"":             {},
	"\"encoding/base32\"":           {},
	"\"encoding/base64\"":           {},
	"\"encoding/binary\"":           {},
	"\"encoding/csv\"":              {},
	"\"encoding/gob\"":              {},
	"\"encoding/hex\"":              {},
	"\"encoding/json\"":             {},
	"\"encoding/pem\"":              {},
	"\"encoding/xml\"":              {},
	"\"errors\"":                    {},
	"\"expvar\"":                    {},
	"\"flag\"":                      {},
	"\"fmt\"":                       {},
	"\"go/ast\"":                    {},
	"\"go/build\"":                  {},
	"\"go/constant\"":               {},
	"\"go/format\"":                 {},
	"\"go/importer\"":               {},
	"\"go/parser\"":                 {},
	"\"go/printer\"":                {},
	"\"go/scanner\"":                {},
	"\"go/token\"":                  {},
	"\"go/types\"":                  {},
	"\"hash\"":                      {},
	"\"hash/adler32\"":              {},
	"\"hash/crc32\"":                {},
	"\"hash/crc64\"":                {},
	"\"hash/fnv\"":                  {},
	"\"html\"":                      {},
	"\"html/template\"":             {},
	"\"image\"":                     {},
	"\"image/color\"":               {},
	"\"image/color/palette\"":       {},
	"\"image/draw\"":                {},
	"\"image/gif\"":                 {},
	"\"image/jpeg\"":                {},
	"\"image/png\"":                 {},
	"\"index/suffixarray\"":         {},
	"\"log\"":                       {},
	"\"log/syslog\"":                {},
	"\"math\"":                      {},
	"\"math/big\"":                  {},
	"\"math/bits\"":                 {},
	"\"math/cmplx\"":                {},
	"\"mime\"":                      {},
	"\"mime/multipart\"":            {},
	"\"mime/quotedprintable\"":      {},
	"\"path\"":                      {},
	"\"path/filepath\"":             {},
	"\"plugin\"":                    {},
	"\"reflect\"":                   {},
	"\"regexp\"":                    {},
	"\"regexp/syntax\"":             {},
	"\"sort\"":                      {},
	"\"strconv\"":                   {},
	"\"strings\"":                   {},
	"\"testing\"":                   {},
	"\"testing/internal/testdeps\"": {},
	"\"testing/quick\"":             {},
	"\"text/scanner\"":              {},
	"\"text/tabwriter\"":            {},
	"\"text/template\"":             {},
	"\"text/template/parse\"":       {},
	"\"unicode\"":                   {},
	"\"unicode/utf8\"":              {},
	"\"unicode/utf16\"":             {},
	"\"unsafe\"":                    {},

	// SDK packages
	"\"blockchain/smcsdk/utest\"":             {},
	"\"blockchain/smcsdk/sdkimpl/ll-state\"":  {},
	"\"blockchain/smcsdk/sdkimpl/object\"":    {},
	"\"blockchain/smcsdk/sdkimpl/sdkhelper\"": {},
	"\"blockchain/smcsdk/sdkimpl/helper\"":    {},
	"\"two\"": {},
}

// WhiteListPkgPrefix - packages start with these paths are all allowed
var WhiteListPkgPrefix = []string{
	"\"blockchain/smcsdk/sdk",
}

const (
	contractNameExpr  = "^[a-zA-Z_]+[a-zA-Z0-9_-]*$"
	organizationExpr  = "^org[1-9a-km-zA-HJ-NP-Z]*$"
	authorExpr        = "[0-9a-fA-f]{64}"
	versionExpr       = "^[1-9]+\\d*(\\.(\\d|([1-9]\\d*)))*$"
	contractClassExpr = "^[A-Z][a-zA-Z0-9_]*$"
)

// LiteralTypes - primitive type
var LiteralTypes = map[string]struct{}{
	"int":      {},
	"int8":     {},
	"int16":    {},
	"int32":    {},
	"int64":    {},
	"uint":     {},
	"uint8":    {},
	"uint16":   {},
	"uint32":   {},
	"uint64":   {},
	"float32":  {},
	"float64":  {},
	"bool":     {},
	"string":   {},
	"byte":     {},
	"Address":  {},
	"Hash":     {},
	"HexBytes": {},
	"PubKey":   {},
}

var NumberType = "Number"
